    digraph G {
        graph [rankdir=LR];
        node [shape=box];
        a [label="Information"];
        b [label="LocaleInformation"];
        c [label="Polarity"];
        d [label="Handler"];
        e [label="Environment"];
        f [label="Ray"];
        g [label="Renderer"];
        a -> a [label="polarity"];
        a -> a [label="polarityBetween(other: Information)"];
        a -> a [label="static NULL"];
        a -> a [label="toString()"];
        a -> a [label="clone()"];
        b -> b [label="position"];
        b -> b [label="velocity"];
        b -> b [label="rotation"];
        b -> b [label="mass"];
        b -> b [label="time"];
        b -> b [label="update()"];
        b -> b [label="clearQueue()"];
        b -> b [label="forceBetween(other: LocaleInformation)"];
        b -> b [label="visibleObjects()"];
        b -> b [label="updateLocaleInformation(info: LocaleInformation)"];
        b -> b [label="removeLocaleInformation(info: LocaleInformation)"];
        b -> b [label="has(info: LocaleInformation | Environment)"];
        b -> b [label="get(info: LocaleInformation | Environment)"];
        b -> b [label="set(info: LocaleInformation, value: LocaleInformation)"];
        b -> b [label="values()"];
        b -> b [label="on(event: string, eventHandler: Handler)"];
        b -> b [label="off(event: string, eventHandler: Handler)"];
        b -> b [label="once(event: string, eventHandler: Handler)"];
        b -> b [label="emit(event: string, info: LocaleInformation)"];
        b -> b [label="toString()"];
        b -> b [label="clone()"];
        c -> c [label="absorb"];
        c -> c [label="listen"];
        c -> c [label="execute"];
        c -> c [label="mediate"];
        c -> c [label="emit"];
        c -> c [label="set(absorb: number, listen: number, execute: number, mediate: number, emit: number)"];
        c -> c [label="get()"];
        c -> c [label="toString()"];
        c -> c [label="clone()"];
        d -> d [label="target"];
        d -> d [label="constructor(event: string, callback: Function, executeOnce: boolean)"];
        d -> d [label="handle(event: string, info: LocaleInformation)"];
        e -> e [label="addLocaleInformation(info: LocaleInformation, position: Vector3, radius: Vector3)"];
        e -> e [label="updateLocaleInformation(info: LocaleInformation)"];
        e -> e [label="removeLocaleInformation(info: LocaleInformation)"];
        e -> e [label="update()"];
        e -> e [label="clearQueue()"];
        e -> e [label="on(event: string, eventHandler: Handler)"];
        e -> e [label="off(event: string, eventHandler: Handler)"];
        e -> e [label="once(event: string, eventHandler: Handler)"];
        e -> e [label="toString()"];
        e -> e [label="clone()"];
        f -> f [label="intersectsSphere(ray: Ray, radius: number)"];
        g -> g [label="render(position: Vector3, direction: Vector3, radius: Vector3)"];
    }