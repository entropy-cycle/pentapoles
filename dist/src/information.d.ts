import { Polarity } from "./polarity";
import { EnvironmentRoot } from "./envbase";
import { Vector3 } from "./vector";
import { Handler } from "./handler";
type EnvironmentalState = 'emission' | 'absorption' | 'vibration' | 'execution' | 'mediation';
type InformationalState = 'local' | 'global';
export declare class Information {
    parent?: EnvironmentRoot | undefined;
    source?: EnvironmentRoot | undefined;
    radius?: Vector3 | undefined;
    polarity: Polarity;
    state: EnvironmentalState;
    domain: InformationalState;
    time: number;
    position: Vector3;
    velocity: Vector3;
    rotation: Vector3;
    constructor(parent?: EnvironmentRoot | undefined, source?: EnvironmentRoot | undefined, radius?: Vector3 | undefined);
    on(event: string, eventHandler: Handler): void;
    off(event: string, eventHandler: Handler): void;
    once(event: string, eventHandler: Handler): void;
    get energy(): number;
    get entropy(): number;
    get mass(): number;
    inRange(position: Vector3, radius: Vector3, target: Vector3): boolean;
    quantizeState(): void;
    unQuantizeState(): void;
    polarityBetween(other: Information): Polarity;
    visibleObjects(): Information[];
    has(info: Information): boolean;
    get(info: Information): Information;
    set(info: Information, newInfo: Information): Information;
    all(): Information[];
    clearQueue(): void;
    advanceState(): EnvironmentalState;
    static NULL: Information;
    toString(): string;
    clone(): Information;
}
export {};
